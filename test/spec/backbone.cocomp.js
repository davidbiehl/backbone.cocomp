// Generated by CoffeeScript 1.6.3
(function() {
  describe("Backbone.CoComp", function() {
    it("needs a comparator", function() {
      var instanciate;
      instanciate = function() {
        return new Backbone.CoComp;
      };
      return expect(instanciate).toThrow();
    });
    return describe("the event system", function() {
      var box1, box2, cocomp, foo;
      cocomp = box1 = box2 = foo = null;
      beforeEach(function() {
        foo = {
          callback: function() {}
        };
        spyOn(foo, 'callback');
        cocomp = new Backbone.CoComp({
          comparator: function(obj) {
            return obj.box1.get('id') === obj.box2.get('id');
          }
        });
        box1 = new Backbone.Collection;
        box2 = new Backbone.Collection;
        cocomp.set("box1", box1);
        return cocomp.set("box2", box2);
      });
      it("fires an out event when the other box is empty", function() {
        var model;
        model = new Backbone.Model({
          id: 3
        });
        model.on('cocomp:out:box2', foo.callback);
        box1.add(model);
        return expect(foo.callback).toHaveBeenCalled();
      });
      it("fires an in event when the model is in both boxes", function() {
        var model;
        model = new Backbone.Model({
          id: 3
        });
        box2.add(model);
        model.on('cocomp:in:box2', foo.callback);
        box1.add(model);
        return expect(foo.callback).toHaveBeenCalled();
      });
      it("fires an out event when the model has been removed", function() {
        var model;
        model = new Backbone.Model({
          id: 9
        });
        box1.add(model);
        box2.add(model);
        model.on('cocomp:out:box2', foo.callback);
        box2.remove(model);
        return expect(foo.callback).toHaveBeenCalled();
      });
      return it("fires the events when compare() is called", function() {
        var model;
        model = new Backbone.Model({
          id: 1
        });
        box1.add(model);
        box2.add(model);
        model.on('cocomp:in:box1', foo.callback);
        model.on('cocomp:in:box2', foo.callback);
        cocomp.compare();
        return expect(foo.callback.calls.length).toEqual(2);
      });
    });
  });

}).call(this);
