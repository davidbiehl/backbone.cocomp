// Generated by CoffeeScript 1.6.3
(function() {
  describe("Backbone.CoComp", function() {
    var box1, box2, cocomp, comparator, model, spy;
    comparator = function(obj) {
      return obj.box1.get('id') === obj.box2.get('id');
    };
    box1 = box2 = cocomp = model = spy = null;
    beforeEach(function() {
      box1 = new Backbone.Collection;
      box2 = new Backbone.Collection;
      cocomp = new Backbone.CoComp({
        comparator: comparator
      });
      model = new Backbone.Model({
        id: 1
      });
      spy = {
        callback: function() {}
      };
      return spyOn(spy, 'callback');
    });
    describe("#constructor", function() {
      return it("requires a `comparator`", function() {
        var instanciate;
        instanciate = function() {
          return new Backbone.CoComp;
        };
        return expect(instanciate).toThrow();
      });
    });
    describe("#unset", function() {
      it("removes the collection", function() {
        cocomp.set("box1", box1);
        expect(cocomp._collections.box1).toBeDefined();
        cocomp.unset("box1");
        return expect(cocomp._collections.box1).toBeUndefined();
      });
      return describe("the `out` event", function() {
        beforeEach(function() {
          cocomp.set("box1", box1);
          cocomp.set("box2", box2);
          box1.add(model);
          box2.add(model);
          return box2.on('cocomp:out:box1', spy.callback);
        });
        it("is triggered", function() {
          cocomp.unset("box1");
          return expect(spy.callback).toHaveBeenCalled();
        });
        return it("isn't triggered when called with `silent: true`", function() {
          cocomp.unset("box1", {
            silent: true
          });
          return expect(spy.callback).not.toHaveBeenCalled();
        });
      });
    });
    return describe("the event system", function() {
      beforeEach(function() {
        cocomp.set("box1", box1);
        return cocomp.set("box2", box2);
      });
      it("triggers an `out` event when the other box is empty", function() {
        model.on('cocomp:out:box2', spy.callback);
        box1.add(model);
        return expect(spy.callback).toHaveBeenCalled();
      });
      it("triggers an `in` event when the model is in both boxes", function() {
        box2.add(model);
        model.on('cocomp:in:box2', spy.callback);
        box1.add(model);
        return expect(spy.callback).toHaveBeenCalled();
      });
      it("triggers an `out` event when the model has been removed", function() {
        box1.add(model);
        box2.add(model);
        model.on('cocomp:out:box2', spy.callback);
        box2.remove(model);
        return expect(spy.callback).toHaveBeenCalled();
      });
      return it("triggers the events when `compare()` is called", function() {
        box1.add(model);
        box2.add(model);
        model.on('cocomp:in:box1', spy.callback);
        model.on('cocomp:in:box2', spy.callback);
        cocomp.compare();
        return expect(spy.callback.calls.length).toEqual(2);
      });
    });
  });

}).call(this);
